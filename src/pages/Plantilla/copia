import React, { useState, useEffect, useRef } from 'react';
import './Plantilla.css';
import pitchImage from './pitch.png';
import playersData from '../../utils/players.json'; // Importamos los jugadores
import formationsData from '../../utils/formations.json'; // Importamos las formaciones
import ModalPlantilla from '../../components/ModalPlantilla';
import { getPlayers, updatePlayerStatus } from '../../services/playerService';

// Funciones utils
const getFormation = (formation, formations) => {
  return formations[formation] || formations['4-4-2']; // Por defecto usa la 4-4-2
};

// Función para contar la cantidad de jugadores por posición en los titulares
const countPositions = (players) => {
  const positionCount = {};
  players.forEach(player => {
    positionCount[player.perfilFutbolistico.posicionNatural] = (positionCount[player.perfilFutbolistico.posicionNatural] || 0) + 1;
  });
  return positionCount;
};

// Función para verificar las posiciones faltantes y sobrantes
const getPositionDifferences = (formation, titulares) => {
  const formationData = getFormation(formation, formationsData);
  const positionCount = countPositions(titulares);

  const requiredPositions = {};
  formationData.forEach(({ label }) => {
    requiredPositions[label] = (requiredPositions[label] || 0) + 1;
  });

  const missingPositions = [];
  const excessPositions = [];

  Object.keys(requiredPositions).forEach(position => {
    const currentCount = positionCount[position] || 0;
    const requiredCount = requiredPositions[position];

    if (currentCount < requiredCount) {
      missingPositions.push(`${position} (${requiredCount - currentCount})`);
    } else if (currentCount > requiredCount) {
      excessPositions.push(`${position} (${currentCount - requiredCount})`);
    }
  });

  return { missingPositions, excessPositions };
};

const SoccerField = () => {
  const [formation, setFormation] = useState('4-4-2');
  const [titulares, setTitulares] = useState([]);
  const [suplentes, setSuplentes] = useState([]);
  const [missingPositions, setMissingPositions] = useState([]);
  const [excessPositions, setExcessPositions] = useState([]);
  const [selectedPosition, setSelectedPosition] = useState(null);
  const tooltipRef = useRef(null); // Usamos un ref para el tooltip

  useEffect(() => {
    // Llamamos a getPlayers para obtener los jugadores, separados en titulares y suplentes
    const fetchPlayers = async () => {
      try {
        const { titulares, suplentes } = await getPlayers();
        setTitulares(titulares); // Guardamos los titulares
        setSuplentes(suplentes); // Guardamos los suplentes
      } catch (error) {
        console.error('Error al obtener los jugadores:', error);
      }
    };

    fetchPlayers();
  }, []);

  useEffect(() => {
    const { missingPositions, excessPositions } = getPositionDifferences(formation, titulares);
    setMissingPositions(missingPositions);
    setExcessPositions(excessPositions);
  }, [formation, titulares]);

  const togglePlayerStatus = async (player, isStarter) => {
    if (!player || !player._id) {
      console.error('El jugador o su _id no está definido.');
      return;
    }

    try {
      // Verificar si el equipo titular ya está completo
      if (!isStarter && titulares.length >= 11) {
        alert('El equipo titular ya está completo. Debes dar de baja a un jugador antes de agregar uno nuevo.');
        return; // No continuar con la actualización si ya hay 11 titulares
      }

      // Determinar el nuevo estado
      const newStatus = isStarter ? 'Suplente' : 'Titular';

      // Actualizar estado en el backend
      await updatePlayerStatus(player._id, newStatus);

      // Actualizar los estados locales
      setTitulares((prevTitulares) =>
        isStarter
          ? prevTitulares.filter((p) => p._id !== player._id) // Remover de titulares
          : [...prevTitulares, {
            ...player,
            perfilFutbolistico: { ...player.perfilFutbolistico, estado: 'Titular' }
          }]
      );

      setSuplentes((prevSuplentes) =>
        isStarter
          ? [...prevSuplentes, {
            ...player,
            perfilFutbolistico: { ...player.perfilFutbolistico, estado: 'Suplente' }
          }]
          : prevSuplentes.filter((p) => p._id !== player._id) // Remover de suplentes
      );
    } catch (error) {
      console.error(`Error al cambiar el estado del jugador con _id ${player._id}:`, error);
    }
  };


  return (
    <div className="layout">
      <div className="soccer-field-container">
        {/* Modal en la esquina superior derecha */}
        <div className="modal-plantilla">
          <ModalPlantilla />
        </div>

        <div className="formation-controls">
          {Object.keys(formationsData).map((formationKey) => (
            <button
              key={formationKey}
              className={`btn btn-primary ${formation === formationKey ? 'active' : ''}`}
              onClick={() => setFormation(formationKey)}
            >
              {formationKey}
            </button>
          ))}
        </div>

        {/* Botón de estado */}
        <div className="team-status-button" title="">
          <button
            className={`status-button ${missingPositions.length === 0 && excessPositions.length === 0
              ? 'check'
              : 'warning'
              }`}
            onMouseEnter={() => {
              const info = `
                Faltantes: ${missingPositions.length > 0 ? missingPositions.join(', ') : 'Ninguno'}
                Sobrantes: ${excessPositions.length > 0 ? excessPositions.join(', ') : 'Ninguno'}
              `;
              tooltipRef.current.innerText = info; // Actualizar el tooltip con la información
            }}
            onMouseLeave={() => {
              tooltipRef.current.innerText = ''; // Limpiar el tooltip
            }}
          >
            {missingPositions.length === 0 && excessPositions.length === 0 ? '✔️' : '⚠️'}
          </button>
          <div className="status-tooltip" ref={tooltipRef}></div> {/* Usamos ref aquí */}
        </div>

        <div className="soccer-field">
          <img src={pitchImage} alt="Soccer Pitch" className="field-image" />
          {getFormation(formation, formationsData).map((player, index) => (
            <button
              key={index}
              className="player-button"
              style={{
                top: player.top,
                left: player.left,
                transition: 'top 0.5s ease, left 0.5s ease',
              }}
              onClick={() => {
                setSelectedPosition(player.label); // Actualizamos el estado con la posición seleccionada
              }}
            >
              {player.label}
            </button>
          ))}
        </div>
      </div>

      {/* Listado de jugadores titulares */}
      <div className="player-list">
        <h3>Titulares</h3>
        <table>
          <thead>
            <tr>
              <th>Nombre</th>
              <th>Posición</th>
              <th>Edad</th>
              <th>Nacionalidad</th>
              <th>Acción</th>
            </tr>
          </thead>
          <tbody>
            {titulares.map((player, index) => (
              <tr
                key={index}
                className={player.perfilFutbolistico.posicionNatural === selectedPosition ? 'highlight-titular' : ''}
              >
                <td>{player.datosPersonales.nombre + " " + player.datosPersonales.apellido}</td>
                <td>{player.perfilFutbolistico.posicionNatural}</td>
                <td>
                  {new Date().getFullYear() - new Date(player.datosPersonales.fechaNacimiento).getFullYear() -
                    (new Date().getMonth() < new Date(player.datosPersonales.fechaNacimiento).getMonth() ||
                      (new Date().getMonth() === new Date(player.datosPersonales.fechaNacimiento).getMonth() &&
                        new Date().getDate() < new Date(player.datosPersonales.fechaNacimiento).getDate()) ? 1 : 0)}
                </td>

                <td>{player.datosPersonales.primeraNacionalidad}</td>
                <td>
                  <button
                    className="bajar-suplentes"
                    onClick={() => togglePlayerStatus(player, true)}
                  >
                    Bajar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Listado de jugadores suplentes */}
      <div className="player-list">
        <h3>Suplentes</h3>
        <table>
          <thead>
            <tr>
              <th>Nombre</th>
              <th>Posición</th>
              <th>Edad</th>
              <th>Nacionalidad</th>
              <th>Acción</th>
            </tr>
          </thead>
          <tbody>
            {suplentes.map((player, index) => (
              <tr
                key={index}
                className={player.perfilFutbolistico.posicionNatural === selectedPosition ? 'highlight-suplente' : ''}
              >
                <td>{player.datosPersonales.nombre + " " + player.datosPersonales.apellido}</td>
                <td>{player.perfilFutbolistico.posicionNatural}</td>
                <td>
                  {new Date().getFullYear() - new Date(player.datosPersonales.fechaNacimiento).getFullYear() -
                    (new Date().getMonth() < new Date(player.datosPersonales.fechaNacimiento).getMonth() ||
                      (new Date().getMonth() === new Date(player.datosPersonales.fechaNacimiento).getMonth() &&
                        new Date().getDate() < new Date(player.datosPersonales.fechaNacimiento).getDate()) ? 1 : 0)}
                </td>

                <td>{player.datosPersonales.primeraNacionalidad}</td>
                <td>
                  <button
                    className="subir-titulares"
                    onClick={() => togglePlayerStatus(player, false)}
                  >
                    Subir
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default SoccerField;
